name: Bump version and release apps
on:
  workflow_dispatch:
  pull_request:
    types:
      - closed
    branches:
      - master

env:
  PORT: ${{ vars.PORT }}
  NODE_ENV: ${{ vars.NODE_ENV }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME  }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN  }}

jobs:
  check_expo:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      # Step 2: Set up Node
      - name: Setup node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 22.x
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run Expo Doctor
      - name: Check expo doctor
        run: npx expo-doctor

  version_bump:
    needs: check_expo
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.bump_version.outputs.new_tag }}
      old_tag: ${{ steps.bump_version.outputs.old_tag }}
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      # Step 2: Bump version and push tag
      - name: Bump version and push tag
        id: bump_version
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: master
          DEFAULT_BUMP: patch
          WITH_V: true
          PRERELEASE: false

      # Step 3: Check if a new tag was created
      - name: Check if version was bumped
        if: steps.bump_version.outputs.new_tag != steps.bump_version.outputs.old_tag
        run: echo "New version created:${{ steps.bump_version.outputs.new_tag }}"

  build_web:
    needs: version_bump
    if: needs.version_bump.outputs.new_tag != needs.version_bump.outputs.old_tag
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      # Step 2: Set up Node
      - name: Setup node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 22.x
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Build the web app
      - name: Build web app
        run: npm run build:web

      # Step 5: Set up Docker QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Step 6: Set up Docker Buildx
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      # Step 7: Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 8: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          file: ./extras/Dockerfile
          push: true
          tags: |
            ${{ env.DOCKERHUB_USERNAME }}/fewa-web-app:${{ needs.version_bump.outputs.new_tag }}
            ${{ env.DOCKERHUB_USERNAME }}/fewa-web-app:latest
          cache-from: type=registry,ref=${{ env.DOCKERHUB_USERNAME }}/fewa-web-app:latest
          cache-to: type=inline
          secrets: |
            PORT=${{ env.PORT }}
            NODE_ENV=${{ env.NODE_ENV }}
            DATABASE_URL=${{ env.DATABASE_URL }}

  build_android:
    needs: version_bump
    if: needs.version_bump.outputs.new_tag != needs.version_bump.outputs.old_tag
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: 0

      # Step 2: Set up Node
      - name: Setup node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 22.x
          cache: 'npm'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"

      # Step 5: Set up Android SDK
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      # Step 6: Set up Expo CLI
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          eas-cache: true
          eas-version: 13.4.2
          packager: npm
          patch-watchers: true
          token: ${{ secrets.EXPO_TOKEN }}

      # Step 7: Build Android app (AAB)
      - name: Build Android app
        run: npm run build:android --output ${{ github.workspace }}/app-release.aab

      # Step 8: Upload android builds as artifact
      # Publish to any distribution like playstore, diawi, etc. in this step
      - name: Upload Build artifact
        uses: actions/upload-artifact@v4
        with:
          name: fewa-release
          path: ${{ github.workspace }}/app-release.aab
